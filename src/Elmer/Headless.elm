module Elmer.Headless exposing
  ( given
  , givenCommand
  , expectMessages
  )

{-| Functions for testing 'headless' Elm modules

# Test a Worker
@docs given

# Test a Command
@docs givenCommand, expectMessages

-}

import Elmer exposing (Matcher, TestState)
import Elmer.TestState as TestState
import Elmer.Headless.Internal as Headless exposing (HeadlessState(..))
import Elmer.Context as Context

{-| Initialize a `TestState` with a model and update function.

Use this function to initialize tests for headless 'worker' programs
created with `Elm.Platform.worker`.
-}
given
  :  model
  -> ( msg -> model -> ( model, Cmd msg ) )
  -> TestState model msg
given =
  Headless.create

{-| Initialize a `TestState` with a command.

A test initialized in this way can use `expectMessages` to examine
messages generated when the given command is processed.
-}
givenCommand : (() -> Cmd msg) -> TestState () msg
givenCommand =
  Headless.createWithCommand

{-| Make expectations about messages generated by processing a command.

    Elmer.givenCommand (\() -> MyModule.commandToSendAnHttpRequest someArgument)
      |> Elmer.Spy.use [ Elmer.Http.serve [ someStubbedResponse ] ]
      |> Elmer.expectMessages (
        exactly 1 <| Expect.equal (
          MyMessage <| Ok "response from server"
        )
      )

Note that `expectMessages` should only be used in a test initialized
with `givenCommand`.
-}
expectMessages : Matcher (List msg) -> Matcher (TestState () msg)
expectMessages matcher =
  TestState.mapToExpectation <|
    \context ->
      Context.state Messages context
        |> Maybe.withDefault []
        |> matcher
