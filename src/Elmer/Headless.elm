module Elmer.Headless exposing
  ( givenCommand
  , expectMessages
  )

{-| Functions for testing 'headless' Elm modules

# Test a Command
@docs givenCommand

# Make Expectations about Messages
@docs expectMessages

-}

import Elmer exposing (Matcher, TestState)
import Elmer.TestState as TestState
import Elmer.Headless.Internal as Headless exposing (HeadlessState(..))
import Elmer.Context as Context

{-| Initialize a test with a command.

A test initialized in this way can use `expectMessages` to examine
messages generated when the given command is processed.
-}
givenCommand : (() -> Cmd msg) -> TestState {} msg
givenCommand =
  Headless.createWithCommand

{-| Make expectations about messages generated by processing a command.

    Elmer.givenCommand MyModule.commandToSendAnHttpRequest
      |> Elmer.Spy.use [ Elmer.Http.serve [ someStubbedResponse ] ]
      |> Elmer.expectMessages (
        exactly 1 <| Expect.equal (
          MyMessage <| Ok "response from server"
        )
      )

Note that `expectMessages` may only be used in a test initialized
with `givenCommand`.
-}
expectMessages : Matcher (List msg) -> Matcher (TestState model msg)
expectMessages matcher =
  TestState.mapToExpectation <|
    \context ->
      Context.state Messages context
        |> Maybe.withDefault []
        |> matcher
